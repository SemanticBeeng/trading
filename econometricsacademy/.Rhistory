library(tseries)
mydata<- read.csv("timeseries_ppi.csv")
attach(mydata)
# Defining variables
Y <- ppi
d.Y <- diff(Y)
t <- yearqrt
# Descriptive statistics and plotting the data
summary(Y)
summary(d.Y)
plot(t,Y)
plot(d.Y)
# Dickey-Fuller test for variable
adf.test(Y, alternative="stationary", k=0)
adf.test(Y, alternative="explosive", k=0)
#summary(lm(dppi ~ lppi, na.action=na.omit))
#summary(lm(dppi ~ lppi + trend, na.action=na.omit))
# Augmented Dickey-Fuller test
adf.test(Y, alternative="stationary")
# DF and ADF tests for differenced variable
adf.test(d.Y, k=0)
adf.test(d.Y)
# ACF and PACF
acf(Y)
pacf(Y)
acf(d.Y)
pacf(d.Y)
# ARIMA(1,0,0) or AR(1)
arima(Y, order = c(1,0,0))
# ARIMA(2,0,0) or AR(2)
arima(Y, order = c(2,0,0))
# ARIMA(0,0,1) or MA(1)
arima(Y, order = c(0,0,1))
# ARIMA(1,0,1) or AR(1) MA(1)
arima(Y, order = c(1,0,1))
# ARIMA on differenced variable
# ARIMA(1,1,0)
arima(d.Y, order = c(1,0,0))
# ARIMA(0,1,1)
arima(d.Y, order = c(0,0,1))
# ARIMA(1,1,1)
arima(d.Y, order = c(1,0,1))
# ARIMA(1,1,3)
arima(d.Y, order = c(1,0,3))
# ARIMA(2,1,3)
arima(d.Y, order = c(2,0,3))
# ARIMA(1,0,1) forecasting
mydata.arima101 <- arima(Y, order = c(1,0,1))
mydata.pred1 <- predict(mydata.arima101, n.ahead=100)
plot (Y)
lines(mydata.pred1$pred, col="blue")
lines(mydata.pred1$pred+2*mydata.pred1$se, col="red")
lines(mydata.pred1$pred-2*mydata.pred1$se, col="red")
# ARIMA(1,1,1) forecasting
mydata.arima111 <- arima(d.Y, order = c(1,0,1))
mydata.pred1 <- predict(mydata.arima111, n.ahead=100)
plot (d.Y)
lines(mydata.pred1$pred, col="blue")
lines(mydata.pred1$pred+2*mydata.pred1$se, col="red")
lines(mydata.pred1$pred-2*mydata.pred1$se, col="red")
arima(d.Y, order = c(1,1,3))
arima(d.Y, order = c(1,0,3))
arima(d.Y, order = c(1,1,3))
series <-  rnorm(1000)
y.st <- filter(series, filter=c(0.6, -0.28),
method='recursive')
ar2.st <- arima(y.st, c(2, 0, 0), include.mean=FALSE,
transform.pars=FALSE, method="ML")
ar2.st$coef
polyroot(c(1, -ar2.st$coef))
Mod(polyroot(c(1, -ar2.st$coef)))
root.comp <- Im(polyroot(c(1, -ar2.st$coef)))
root.real <- Re(polyroot(c(1, -ar2.st$coef)))
# Plotting the roots in a unit circle
x <- seq(-1, 1, length = 1000)
y1 <- sqrt(1- x^2)
y2 <- -sqrt(1- x^2)
plot(c(x, x), c(y1, y2), xlab='Real part',
ylab='Complex part', type='l',
main='Unit Circle', ylim=c(-2, 2), xlim=c(-2, 2))
abline(h=0)
abline(v=0)
points(Re(polyroot(c(1, -ar2.st$coef))),
Im(polyroot(c(1, -ar2.st$coef))), pch=19)
legend(-1.5, -1.5, legend="Roots of AR(2)", pch=19)
series <-  rnorm(1000)
y.st <- filter(series, filter=c(0.6, -0.28),
method='recursive')
ar2.st <- arima(y.st, c(2, 0, 0), include.mean=FALSE,
transform.pars=FALSE, method="ML")
ar2.st$coef
polyroot(c(1, -ar2.st$coef))
Mod(polyroot(c(1, -ar2.st$coef)))
root.comp <- Im(polyroot(c(1, -ar2.st$coef)))
root.real <- Re(polyroot(c(1, -ar2.st$coef)))
# Plotting the roots in a unit circle
x <- seq(-1, 1, length = 1000)
y1 <- sqrt(1- x^2)
y2 <- -sqrt(1- x^2)
plot(c(x, x), c(y1, y2), xlab='Real part',
ylab='Complex part', type='l',
main='Unit Circle', ylim=c(-2, 2), xlim=c(-2, 2))
abline(h=0)
abline(v=0)
points(Re(polyroot(c(1, -ar2.st$coef))),
Im(polyroot(c(1, -ar2.st$coef))), pch=19)
legend(-1.5, -1.5, legend="Roots of AR(2)", pch=19)
?filter
series <-  rnorm(1000)
y.st <- filter(series, filter=c(0.6, -0.28),
method='recursive')
ar2.st <- arima(y.st, c(2, 0, 0), include.mean=FALSE,
transform.pars=FALSE, method="ML")
ar2.st$coef
series <-  rnorm(1000)
y.st <- filter(series, filter=c(0.6, -0.28),
method='recursive')
ar2.st <- arima(y.st, c(2, 0, 0), include.mean=FALSE,
transform.pars=FALSE, method="ML")
ar2.st$coef
polyroot(c(1, -ar2.st$coef))
Mod(polyroot(c(1, -ar2.st$coef)))
root.comp <- Im(polyroot(c(1, -ar2.st$coef)))
root.real <- Re(polyroot(c(1, -ar2.st$coef)))
# Plotting the roots in a unit circle
x <- seq(-1, 1, length = 1000)
y1 <- sqrt(1- x^2)
y2 <- -sqrt(1- x^2)
plot(c(x, x), c(y1, y2), xlab='Real part',
ylab='Complex part', type='l',
main='Unit Circle', ylim=c(-2, 2), xlim=c(-2, 2))
abline(h=0)
abline(v=0)
points(Re(polyroot(c(1, -ar2.st$coef))),
Im(polyroot(c(1, -ar2.st$coef))), pch=19)
legend(-1.5, -1.5, legend="Roots of AR(2)", pch=19)
library(urca)
library(urca)
data(npext)
y <- ts(na.omit(npext$unemploy), start=1909, end=1988,
frequency=1)
library(urca)
data(npext)
y <- ts(na.omit(npext$unemploy), start=1909, end=1988,
frequency=1)
op <- par(no.readonly=TRUE)
layout(matrix(c(1, 1, 2, 3), 2, 2, byrow=TRUE))
op <- par(no.readonly=TRUE)
layout(matrix(c(1, 1, 2, 3), 2, 2, byrow=TRUE))
plot(y, ylab="unemployment rate (logarithm)")
acf(y, main='Autocorrelations', ylab='', ylim=c(-1, 1))
pacf(y, main='Partial Autocorrelations', ylab='',
ylim=c(-1, 1))
par(op)
## tentative ARMA(2,0)
arma20 <- arima(y, order=c(2, 0, 0))
ll20 <- logLik(arma20)
aic20 <- arma20$aic
res20 <- residuals(arma20)
Box.test(res20, lag = 20, type =  "Ljung-Box")
shapiro.test(res20)
## alternative specifications
## ARMA(3,0)
arma30 <- arima(y, order=c(3, 0, 0))
ll30 <- logLik(arma30)
aic30 <- arma30$aic
lrtest <- as.numeric(2*(ll30 - ll20))
chi.pval <- pchisq(lrtest, df = 1, lower.tail = FALSE)
## ARMA(1,1)
arma11 <- arima(y, order = c(1, 0, 1))
ll11 <- logLik(arma11)
aic11 <- arma11$aic
tsdiag(arma11)
res11 <- residuals(arma11)
Box.test(res11, lag = 20, type =  "Ljung-Box")
shapiro.test(res11)
tsdiag(arma11)
## Using auto.arima()
library(forecast)
auto.arima(y, max.p = 3, max.q = 3, start.p = 1,
start.q = 1, ic = "aic")
?ts
library(urca)
data(npext)
y <- ts(na.omit(npext$unemploy), start=1909, end=1988, frequency=1)
op <- par(no.readonly=TRUE)
layout(matrix(c(1, 1, 2, 3), 2, 2, byrow=TRUE))
plot(y, ylab="unemployment rate (logarithm)")
acf(y, main='Autocorrelations', ylab='', ylim=c(-1, 1))
pacf(y, main='Partial Autocorrelations', ylab='', ylim=c(-1, 1))
par(op)
arma20 <- arima(y, order=c(2, 0, 0))
ll20 <- logLik(arma20)
arma20
ll20
aic20 <- arma20$aic
res20
res20 <- residuals(arma20)
plot(res20, ylab="unemployment rate model residuals")
plot(res20, ylab="arma20 residuals")
Box.test(res20, lag = 20, type =  "Ljung-Box")
shapiro.test(res20)
arma20 <- arima(y, order=c(2, 0, 0))
arma20
arma20$ar1
arma20$coef
arma20$coef$ar1
arma20$coef[0]
arma20$coef['ar1']
arma20$coef['ar2']
arma20
acf(y, main='Autocorrelations', ylab='', ylim=c(-1, 1))
pacf(y, main='Partial Autocorrelations', ylab='', ylim=c(-1, 1))
par(op)
plot(res20, ylab="arma20 residuals")
shapiro.test(res20)
as.numeric(2*(ll30 - ll20))
arma30 <- arima(y, order=c(3, 0, 0))
ll30 <- logLik(arma30)
aic30 <- arma30$aic
lrtest <- as.numeric(2*(ll30 - ll20))
as.numeric(2*(ll30 - ll20))
2*(ll30 - ll20)
ll30
ll20
ll30 - ll20
?pchisq
chi.pval
arma30 <- arima(y, order=c(3, 0, 0))
ll30 <- logLik(arma30)
aic30 <- arma30$aic
lrtest <- as.numeric(2*(ll30 - ll20))
chi.pval <- pchisq(lrtest, df = 1, lower.tail = FALSE)
chi.pval
arma11 <- arima(y, order = c(1, 0, 1))
ll11 <- logLik(arma11)
aic11 <- arma11$aic
tsdiag(arma11)
?tsdiag
examples(arima)
require(graphics)
fit <- arima(lh, c(1,0,0))
tsdiag(fit)
examples(arima)
examples(arima)
